import pandas as pd
from apyori import apriori

# Reading the student data into a Pandas dataframe
Output_edited = pd.read_csv('/content/Output_edited.csv')

# Defining the list of attributes to consider for the Apriori algorithm
attributes = ['In which department are you studying at Georgia Tech?', 'Housing Type?', 'Housing Configuration?', 'Roommate information?', 'Rent you pay?', 'What is your Lease Term?','Food eating habits?']

# Creating a list of transactions where each transaction is a list of attribute values for a student
transactions = []
for i in range(len(Output_edited)):
    transaction = []
    for attribute in attributes:
        transaction.append(str(Output_edited.iloc[i][attribute]))
    transactions.append(transaction)

# Running the Apriori algorithm with a minimum support threshold of 0.1 and minimum confidence of 0.5
rules = apriori(transactions, min_support=0.1, min_confidence=0.5)

# Converting the rules iterator to a list
rules_list = list(rules)

# Displaying the rules generated by the algorithm
for rule in rules_list:
    print(rule)


for rule in rules_list:
  itemset = list(rule.items)
  support = rule.support
  print(f"{itemset} - Support:{support}")

# Extracting the top 5 itemsets by support
top_itemsets = sorted(rules_list, key=lambda x: x.support, reverse=True)[:5]
for rule in top_itemsets:
    itemset = list(rule.items)
    support = rule.support
    print(f"{itemset} - Support:{support}")

# Extracting the rules with the highest confidence
strong_rules = sorted(rules_list, key=lambda x: x.ordered_statistics[0].confidence, reverse=True)[:5]
for rule in strong_rules:
    antecedent = list(rule.ordered_statistics[0].items_base)
    consequent = list(rule.ordered_statistics[0].items_add)
    confidence = rule.ordered_statistics[0].confidence
    print(f"{antecedent} => {consequent} - Confidence:{confidence}")
# Identifying the most frequent itemsets
frequent_itemsets = []
for rule in rules_list:
    itemset = list(rule.items)
    support = rule.support
    frequent_itemsets.append((itemset, support))

# Sorting the frequent itemsets by support
frequent_itemsets = sorted(frequent_itemsets, key=lambda x: x[1], reverse=True)

# Displaying the 10 most frequent itemsets
print("10 Most Frequent Itemsets:")
for itemset, support in frequent_itemsets[:10]:
    print(f"{itemset} - Support:{support}")

# Identifying the most interesting rules
interesting_rules = []
for rule in rules_list:
    itemset = list(rule.items)
    confidence = rule.ordered_statistics[0].confidence
    lift = rule.ordered_statistics[0].lift
    interesting_rules.append((itemset, confidence, lift))

# Sorting the interesting rules by confidence
interesting_rules = sorted(interesting_rules, key=lambda x: x[1], reverse=True)

# Displaying the 10 most interesting rules
print("10 Most Interesting Rules:")
for itemset, confidence, lift in interesting_rules[:10]:
    print(f"{itemset} -> Confidence:{confidence}, Lift:{lift}")
